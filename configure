#! /bin/sh
#
# Configuration script for YLib plugin.
#
#------------------------------------------------------------------------------
#
# YLib (Yorick Library) is licensed under the MIT "Expat" License.
#
# Copyright (C) 2012-2018, Éric Thiébaut <https://github.com/emmt/ylib>
#
#------------------------------------------------------------------------------

# Temporaries.
cfg_tmpdir=.
cfg_tmpfile="$cfg_tmpdir/cfg-$$"
cfg_debug=no

cfg_on_exit () {
  if test "$cfg_debug" = "no"; then
    rm -f "$cfg_tmpfile" "$cfg_tmpfile.i"
  fi
}

trap cfg_on_exit 0

cfg_progname=$0
cfg_srcdir=$(dirname "$0")
#cfg_path=$(readlink -fn "$@")
#cfg_srcdir=$(dirname "$cfg_path")

cfg_die () { echo >&2 "$cfg_progname: $*"; exit 1; }

cfg_opt_value () { echo "$*" | sed 's/^--[^=]*=//'; }

cfg_despace () { echo "$*" | sed 's/ /\\ /g'; }

cfg_add_rule () {
    local s t
    s=$*
    for t in "/" "%" "@" "|" "#" "," "-"
    do
        case "$s" in
            *$t* ) ;;
            * ) break
        esac
    done
    test "$t" = "-" && cfg_die "No valid separator found"
    s='[ 	]*'
    s="s${t}^${s}${1}${s}=.*${t}${1}=${2}${t}"
    if test "x$cfg_filter" = "x"
    then
        cfg_filter="$s"
    else
        cfg_filter="$cfg_filter;$s"
    fi
}

cfg_help () {
  cat <<EOF
usage: $cfg_progname [-h|--help] [--yorick=PATH_TO_YORICK]
options:
  --yorick=PATH        Path to Yorick executable [$cfg_yorick].
  --arch=OS-CPU        Architecture [$cfg_arch].
  --debug              Turn debug mode on (for this script).
  -h, --help           Print this help and exit.
EOF
}

cfg_os=$(uname -s | tr A-Z a-z)
if test "x$cfg_os" = "x"; then
    cfg_os="unknown"
fi
cfg_cpu=$(uname -m | tr A-Z a-z)
if test "x$cfg_cpu" = "x"; then
    cfg_cpu="unknown"
else
    case "$cfg_cpu" in i?86 ) cfg_cpu="ix86";; esac
fi
cfg_arch=${cfg_os}-${cfg_cpu}
cfg_yorick=yorick
while test $# -ge 1; do
  cfg_arg=$1
  shift
  case "$cfg_arg" in
    -h | --help )
      cfg_help
      exit 0
      ;;
    --arch=*)
      cfg_arch=$(cfg_opt_value "$cfg_arg")
      ;;
    --debug)
      cfg_debug=yes
      ;;
    --yorick=*)
      cfg_yorick=$(cfg_opt_value "$cfg_arg")
      ;;
    *)
      cfg_die "Unknown option \"$cfg_arg\""
  esac
done

case "$cfg_arch" in
  mswin) cfg_exe_sfx=".exe";;
  *)     cfg_exe_sfx=""
esac

# Search Yorick in the path:
if test "x$cfg_yorick" = "xyorick"; then
  cfg_save_IFS=$IFS
  IFS=":"
  for cfg_dir in $PATH; do
    cfg_file=$cfg_dir/yorick$cfg_exe_sfx
    if test -r "$cfg_file" -a -x "$cfg_file" -a ! -d "$cfg_file"; then
      cfg_yorick=$cfg_file
      break
    fi
  done
  IFS=$cfg_save_IFS
fi
if test "x$cfg_yorick" = "xyorick" \
  -o ! -f "$cfg_yorick" \
  -o ! -x "$cfg_yorick"; then
  echo >&2 "Yorick executable not found."
  echo >&2 "Try to specify the path with option --yorick=..."
  exit 1
fi
echo >&2 "Yorick executable --------> $cfg_yorick"

# Get the Y_HOME and Y_SITE variables.
cat >"$cfg_tmpfile.i" <<EOF
write, format = "Y_HOME=%s\nY_SITE=%s\n", Y_HOME, Y_SITE;
quit;
EOF
"$cfg_yorick" -batch "$cfg_tmpfile.i" > "$cfg_tmpfile"

cfg_yhome=$(sed < "$cfg_tmpfile" -e '/^Y_HOME=/!d;s/^Y_HOME=//')
cfg_ysite=$(sed < "$cfg_tmpfile" -e '/^Y_SITE=/!d;s/^Y_SITE=//')
cfg_ymkdir=$cfg_yhome
echo >&2 "Yorick home directory ----> $cfg_yhome"
echo >&2 "Yorick site directory ----> $cfg_ysite"

# Create the Makefile.
cfg_dst="./Makefile"
cfg_src="$cfg_srcdir/Makefile.in"
cfg_filter=""
cfg_add_rule "Y_EXE"       "$cfg_yorick"
cfg_add_rule "Y_MAKEDIR"   "$cfg_ymkdir"
cfg_add_rule "Y_EXE_HOME"  "$cfg_yhome"
cfg_add_rule "Y_EXE_SITE"  "$cfg_ysite"
cfg_add_rule "PKG_CFLAGS"  "$cfg_cflags"
cfg_add_rule "PKG_DEPLIBS" "$cfg_deplibs"
cfg_add_rule "PKG_LDFLAGS" "$cfg_ldflags"
cfg_add_rule "srcdir"      "$cfg_srcdir"
sed < "$cfg_src" > "$cfg_dst" -e "$cfg_filter"

echo "Makefile has been created."
echo "You can run 'make' and 'make install' now."
